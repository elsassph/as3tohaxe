-- Parse the tokens generated by Lexer

module ActionhaXe.Parser where

import ActionhaXe.Lexer
import ActionhaXe.Prim
import Text.Parsec
import Text.Parsec.Combinator

type Parser = Parsec [Token] ()

data ASTNode = NodeProgram ASTNode
             | NodePackage (String, ASTNode)
             | NodeTokenList [Token]
             | NodeFailure
    deriving (Show, Eq)


program :: Parser ASTNode
program = try( do{ x <- package; return x} )
      <|> do{ x <- many anytok; return $ NodeTokenList x} -- should always succeed
          <?> "Unknown Error"

package = do{ p <- kw "package"; x <- many anytok;  return $ NodePackage ("", (NodeTokenList x)) }

runParser :: String -> [Token] -> ASTNode
runParser filename ts = case parse program filename ts of
                             Right a -> NodeProgram a
                             Left _ -> NodeFailure
